generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  username          String              @unique
  firstName         String
  lastName          String?
  email             String              @unique
  password          String?
  isVerified        Boolean             @default(false)
  role              UserRole            @default(USER)
  imageUrl          String              @default("")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  events            CleanupEvent[]
  takePart          TakePart[]
  cleanupResult     CleanupResult[]
  notifications     Notification[]
  comments          Comment[]
  otp               Otp[]
  blacklistTokens   BlacklistToken[]
  ContaminatedPoint ContaminatedPoint[]
  reports           Report[]
  supportRequests   SupportRequest[]
  sentMessages      Message[]           @relation("MessageSender")
  chatMembers       ChatMember[]
  messageReactions  MessageReaction[]
  takePartRequests  TakePartRequest[]

  @@index([role])
}

model CleanupEvent {
  id               String                 @id @default(uuid())
  name             String
  description      String
  startDate        DateTime
  endDate          DateTime
  status           EventStatus
  dates            CleanupEventDate[]
  imageUrl         String
  equipments       CleanupEquipment[]
  location         CleanupEventLocation?  @relation
  organizerId      String
  organizer        User                   @relation(fields: [organizerId], references: [id])
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  takePart         TakePart[]
  result           CleanupResult?
  comments         Comment[]
  notifications    Notification[]
  questions        CleanupEventQuestion[]
  takePartRequests TakePartRequest[]
}

model CleanupEventDate {
  id      String       @id @default(uuid())
  date    DateTime
  eventId String
  event   CleanupEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model CleanupEventLocation {
  id           String       @id @default(uuid())
  latitude     Float
  longitude    Float
  eventId      String       @unique
  event        CleanupEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  settlementId String?
  regionId     String
  region       Region       @relation(fields: [regionId], references: [id])
  settlement   Settlement?  @relation("SettlementToLocation", fields: [settlementId], references: [id])
}

model Region {
  id                        String                      @id @default(uuid())
  name                      String                      @unique
  latitude                  Float
  longitude                 Float
  settlements               Settlement[]
  cleanupEventLocations     CleanupEventLocation[]
  contaminatedPointLocation ContaminatedPointLocation[]
}

model Settlement {
  id                        String                      @id @default(uuid())
  name                      String
  regionId                  String
  latitude                  Float
  longitude                 Float
  region                    Region                      @relation(fields: [regionId], references: [id])
  locations                 CleanupEventLocation[]      @relation("SettlementToLocation")
  contaminatedPointLocation ContaminatedPointLocation[]

  @@unique([name, regionId])
}

model TakePart {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  eventId   String
  event     CleanupEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([userId, eventId])
}

model CleanupResult {
  id          String       @id @default(uuid())
  description String
  eventId     String       @unique
  event       CleanupEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  photos      String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CleanupEquipment {
  id          String       @id @default(uuid())
  eventId     String
  event       CleanupEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  equipmentId String
  equipment   Equipment    @relation(fields: [equipmentId], references: [id])
  quantity    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Equipment {
  id                String             @id @default(uuid())
  name              String             @unique
  cleanupEquipments CleanupEquipment[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  message   String
  eventId   String
  type      NotificationType
  event     CleanupEvent     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
}

model Comment {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  eventId   String
  event     CleanupEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  content   String
  parentId  String?      @map("parent_id")
  parent    Comment?     @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]    @relation("CommentReplies")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Otp {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlacklistToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContaminatedPoint {
  id          String                     @id @default(uuid())
  imageUrl    String
  name        String
  description String
  status      ContaminatedPointStatus
  creatorId   String
  creator     User                       @relation(fields: [creatorId], references: [id])
  location    ContaminatedPointLocation? @relation
}

model ContaminatedPointLocation {
  id                  String            @id @default(uuid())
  contaminatedPointId String            @unique
  latitude            Float
  longitude           Float
  settlementId        String?
  regionId            String
  region              Region            @relation(fields: [regionId], references: [id])
  settlement          Settlement?       @relation(fields: [settlementId], references: [id])
  contaminatedPoint   ContaminatedPoint @relation(fields: [contaminatedPointId], references: [id], onDelete: Cascade)
}

model Report {
  id          String           @id @default(uuid())
  userId      String
  targetType  ReportTargetType
  targetId    String
  reason      String
  description String?
  status      ReportStatus     @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])

  @@index([targetType, targetId])
}

model SupportRequest {
  id        String               @id @default(uuid())
  userId    String
  subject   String
  message   String
  status    SupportRequestStatus @default(IN_PROGRESS)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  user      User                 @relation(fields: [userId], references: [id])
}

model Chat {
  id          String       @id @default(uuid())
  name        String?
  description String?
  type        ChatType     @default(DIRECT)
  imageUrl    String       @default("")
  isDeleted   Boolean      @default(false)
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
  members     ChatMember[]
}

model ChatMember {
  id        String     @id @default(uuid())
  userId    String
  chatId    String
  role      MemberRole
  joinedAt  DateTime   @default(now())
  isDeleted Boolean    @default(false)
  deletedAt DateTime?
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id              String              @id() @default(uuid())
  content         String?
  type            MessageType         @default(TEXT)
  senderId        String
  chatId          String
  replyToId       String?
  isDeletedForAll Boolean             @default(false)
  isUpdated       Boolean             @default(false)
  deletedAt       DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  sender          User                @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo         Message?            @relation("MessageReply", fields: [replyToId], references: [id])
  replies         Message[]           @relation("MessageReply")
  attachments     MessageAttachment[]
  reactions       MessageReaction[]
  hiddenForUsers  MessageHidden[]
}

model MessageHidden {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  hiddenAt  DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@unique([messageId, userId])
}

model MessageAttachment {
  id        String         @id @default(uuid())
  messageId String
  fileName  String
  fileSize  Int
  mimeType  String
  url       String
  type      AttachmentType
  message   Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model CleanupEventQuestion {
  id              String                        @id @default(uuid())
  eventId         String
  type            CleanupEventQuestionType
  text            String
  order           Int
  required        Boolean
  event           CleanupEvent                  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  questionAnswers CleanupEventQuestionAnswear[]
  options         CleanupEventQuestionOption[]
}

model CleanupEventQuestionOption {
  id         String               @id @default(uuid())
  text       String
  order      Int
  questionId String
  question   CleanupEventQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CleanupEventQuestionAnswear {
  id         String               @id @default(uuid())
  requestId  String
  questionId String
  answear    String
  request    TakePartRequest      @relation(fields: [requestId], references: [id], onDelete: Cascade)
  question   CleanupEventQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([requestId, questionId])
}

model TakePartRequest {
  id      String                        @id @default(uuid())
  userId  String
  eventId String
  user    User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   CleanupEvent                  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  answers CleanupEventQuestionAnswear[]

  @@unique([userId, eventId])
}

enum CleanupEventQuestionType {
  TEXT
  NUMBER
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  BOOLEAN
  DATE
  RANGE
}

enum AttachmentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  SYSTEM
}

enum ChatType {
  DIRECT
  GROUP
}

enum SupportRequestStatus {
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ReportStatus {
  PENDING
  REVIEWED
  REJECTED
}

enum ReportTargetType {
  CLEANUP_EVENT
  CONTAMINATED_POINT
  COMMENT
}

enum ContaminatedPointStatus {
  ACTIVE
  CLEANED
}

enum NotificationType {
  EVENT
  COMMENT
  REPLY
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}
